     1                                  ; Se citesc de la tastatura doua numere a si b. Sa se calculeze valoarea expresiei (a/b)*k, k fiind o constanta definita in segmentul de date. Afisati valoarea expresiei (in baza 2).
     2                                  
     3                                  bits 32
     4                                  global start
     5                                  
     6                                  extern exit, printf, scanf               ; adaugam printf si scanf ca functii externe           
     7                                  import exit msvcrt.dll     
     8                                  import printf msvcrt.dll     
     9                                  import scanf msvcrt.dll      
    10                                  
    11                                  segment data use32 class = data
    12 00000000 <res 00000004>              a resd 1
    13 00000004 <res 00000004>              b resd 1
    14 00000008 0A000000                    k dd 10
    15                                      
    16 0000000C 2564256400                  format_citire db '%d%d', 0       ; %d <=> un numar decimal (baza 10)
    17 00000011 257300                      format_afisare db '%s', 0
    18                                      
    19 00000014 30<rept>                    sir_binar times 32 db '0'            ; 32 bits + 1 null terminator
    20 00000034 00                              db 0
    21                                      
    22                                  segment code use32 class = code
    23                                      
    24                                      ; convert_ax_in_eax() parametri in AX
    25                                      convert_ax_in_eax:
    26 00000000 666A00                          push word 0
    27 00000003 6650                            push ax
    28 00000005 58                              pop EAX                         ; EAX = 0 : AX
    29 00000006 C3                              ret
    30                                  
    31                                      start:
    32                                          ; scanf(format, a, b)
    33 00000007 68[04000000]                    push dword b
    34 0000000C 68[00000000]                    push dword a
    35 00000011 68[0C000000]                    push dword format_citire
    36 00000016 FF15[00000000]                  call [scanf]
    37 0000001C 83C40C                          add ESP, 4 * 3                   ; resetam ESP cu 3 valori (a, b, formatul)
    38                                          
    39                                          ; (a/b)*k
    40 0000001F A1[00000000]                    mov EAX, [a]
    41 00000024 BA00000000                      mov EDX, dword 0
    42 00000029 66F735[04000000]                div word [b]                     ; rezultatul este un word
    43 00000030 F725[08000000]                  mul dword [k]                    ; rezultatul este un dword
    44                                          ; teoretic vorbind rezultatul se afla in EAX, acesta fiind un dword (presupunem ca nu avem overflow)
    45                                          
    46 00000036 BA00000000                      mov EDX, dword 0
    47                                          
    48 0000003B BF[33000000]                    mov EDI, sir_binar + 31          ; suntem pe ultima pozitit a lui sir_binar
    49 00000040 FD                              STD                              ; vrem sa punem resturile impartirii lui EAX = (a/b)*k in ordine inversa
    50                                          
    51 00000041 BB02000000                      mov EBX, dword 2                  ; baza 2
    52                                          loopy:
    53 00000046 F7F3                                div EBX                      ; EDX:EAX = EDX:EAX / EBX
    54 00000048 92                                  xchg EDX, EAX                ; in AX avem restul
    55 00000049 0430                                add AL, '0'                  ; avem caractere in AL acum
    56 0000004B AA                                  STOSB                       
    57 0000004C 92                                  xchg EDX, EAX                ; EAX revine la valoarea initiala, la cat
    58 0000004D BA00000000                          mov EDX, 0
    59 00000052 83F800                              CMP EAX, 0
    60 00000055 75EF                            JNE loopy
    61                                          
    62 00000057 FC                              CLD
    63                                          ; printf(format, val)
    64 00000058 68[14000000]                    push sir_binar
    65 0000005D 68[11000000]                    push format_afisare
    66 00000062 FF15[00000000]                  call [printf]
    67 00000068 83C408                          add ESP, 4 * 2
    68                                          
    69 0000006B 6A00                            push dword 0
    70 0000006D FF15[00000000]                  call [exit]
    71 00000073 83C404                          add ESP, 4
    72                                          
    73                                          
