TASK:  Creați un program care lucrează cu numere complexe (a + bi). Programul gestionează o listă de numere complexe și permite efectuarea repetată a urmatorelor acțiuni:
  -> T1: adaugă numere în listă
    -> adaugă număr complex la sfârșitul listei
    -> inserare număr complex pe o poziție dată
  -> T2: modificare elemente din listă
    -> șterge element de pe o poziție dată
    -> șterge element de pe un interval de poziții
    -> înlocuiește toate aparițiile unui număr complex cu un alt număr complex
  -> T3: cautare numere
    -> tipărește partea imaginară pentru numerele din listă. Se dă intervalul de pozitii (sub secvențe)
    -> tipărește toate numerele complexe care au modului mai mic decât 10
    -> tipărește toate numerele complexe care au modului egal 10
  -> T4: operații cu numerele din listă
    -> suma numerelor dintr-o subsecvență dată
    -> produsul numerelor dintr-o subsecvență dată
    -> tipărește lista sortată descrescător după partea imaginară
  -> T5: filtrare
    -> filtre parte reală prin - elimină din listă numerele complexe la -> care partea reală este primă
    -> filtrare modul - elimină din listă numerele complexe la care modulul este <, = sau > decât un număr dat
  -> T6: undo
    -> reface ultima operație (lista de numere revine la numerele ce existau înainte de ultima operație care a modificat lista) - NU folosesc funcția deepCopy

Cerinţe generale:
  -> Folosiți procesul de dezvoltare: Incrementală bazată pe funcționalități şi Dezvoltare dirijată de teste 
  -> Planificați iterații pentru 3 laboratoare succesive. În fiecare săptămână primiţi o notă pentru ce s-a realizat pentru iterația din săptămâna curentă.
  -> Prima iterație trebuie sa conţină cel puțin 3 cerințe (din funcționalităţile 3-5)
  -> Documentația trebuie să conțină: enunțul, lista de funcționalități, planul de iterații, scenarii de rulare, lista de taskuri (activităţi)
  -> Toate funcțiile trebuie să includă specificații, toate funcțiile trebuie sa fie testate (funcții de test cu assert) în afară de partea cu interacţiunea utilizator.
  -> Separați partea de interfață utilizator de restul aplicației (sa nu aveți funcții care fac 2 lucruri: un calcul + tipărire/citire)
  -> Datele de intrare trebuie validate, programul semnalează erorile către utilizator.



// C0:
  -> Crearea unui meniu principal cu mai multe optiune
  -> optinuea de exit
  -> validare

  | Frontend           | Imput              | Backend              |
  |--------------------|--------------------|----------------------|
  |T1                  |                    |                      |
  |T2                  |                    |                      |
  |T3                  |                    |                      |
  |T4                  |                    |                      |
  |T5                  |                    |                      |
  |T6                  |                    |                      |
  |exit                |                    |                      |
  |                    |                    |                      |
  |                    | >> input           |validare input        |
  |                    |                    |--> corect: do in the |
  |                    |                    |    function          |
  |                    |                    |\-> altfel: eroare    |
  |                    |                    |    fa din nou C0     |
  |--------------------|--------------------|----------------------|

  in C0 dorim 'u' sau "undo" pentru a executa functia de undo
  in C0 dorim 'e' sau "exit" pentru a iesi din program


// T1:

  >>> T1.1: daugă număr complex la sfârșitul listei
      -> T1.1.1 adaugare
      -> T1.1.2 validare

  | Frontend           | Imput              | Backend              |
  |--------------------|--------------------|----------------------|
  |daugă număr complex |                    |                      |
  |la sfârșitul listei | >> 1               |                      |
  |                    |                    |                      |
  |ce numar vrei să    |                    |                      |
  |adaugi              | >> n               | este numarul valid?  |
  |                    |                    | --> da: adauga n     |
  |                    |                    | \-> nu: mesaj eroare |
  |                    |                    |    face T1.1 din nou |
  |--------------------|--------------------|----------------------|

  >>> T1.2: inserare număr complex pe o poziție dată
      -> T1.2.1 adaugare pe pozitia data
      -> T1.2.2 validare

  | Frontend           | Imput              | Backend              |
  |--------------------|--------------------|----------------------|
  |inserare număr comx-|                    |                      |
  |plex pe o poziție   | >> 2               |                      |
  |                    |                    |                      |
  |ce numar vrei să    |                    |                      |
  |adaugi              | >> n               | este numarul valid?  |
  |                    |                    | --> da: continua     |
  |                    |                    | \-> nu: mesaj eroare |
  |                    |                    |    face T1.2 din nou |
  |pe ce pozitie vrei  |                    |                      |
  |sa-l inserezi pe n  | >> p               | este pozitia valid?  |
  |                    |                    | --> da: adauga n     |
  |                    |                    | \-> nu: mesaj eroare |
  |                    |                    |    face T1.2 din nou |
  |--------------------|--------------------|----------------------|

  >>> T1.3: crearea unui meniu secundar care contine cele doua moduri de adaugare 

  << IMPORTANT >> this is alos gonna be a while and when the input is 'b' sau "back" it will break, automaticly going back to the main program (or the program that last coled this action)
  
  >>> T1.4: optiunea de "go back" care ne intoarce la C0


// T2: modificare elemente din listă

  >>> T2.1: șterge element de pe o poziție dată
      -> T2.1.1 stergere
      -> T2.1.2 validare

  | Frontend           | Imput              | Backend              |
  |--------------------|--------------------|----------------------|
  |de pe ce pozitie    |                    |                      |
  |stergem valoarea    | >> p               | este pozitia valid?  |
  |                    |                    | --> da: stergem      |
  |                    |                    | \-> nu: mesaj eroare |
  |                    |                    |    face T2.1 din nou |
  |--------------------|--------------------|----------------------|

  >>> T2.2: șterge element de pe un interval de poziții
      -> T2.2.1 stergere
      -> T2.2.2 validare

  | Frontend           | Imput              | Backend              |
  |--------------------|--------------------|----------------------|
  |care este pozitia   |                    |                      |
  |de inceput si cea de|                    | este pozitia valid?  |
  |final               |  >> p1, p2         | --> da: stergem de la|
  |                    |                    |     p1 la p2 inclusiv|
  |                    |                    | \-> nu: mesaj eroare |
  |                    |                    |    face T2.1 din nou |
  |--------------------|--------------------|----------------------|

  >>> T2.3: înlocuiește toate aparițiile unui număr complex cu un alt număr complex
      -> T2.3.1 inlocuire numere
      -> T2.3.2 validare

  | Frontend           | Imput              | Backend              |
  |--------------------|--------------------|----------------------|
  |ce numar vrei sa    |                    |                      |
  |inlocuiesti         | >> n               | exista numarul?      |
  |                    |                    | --> da: continua     |
  |                    |                    | \-> nu: mesaj eroare |
  |                    |                    |    face T2.1 din nou |
  |cu ce numar vrei sa |                    |                      |
  |inlocuiesti valoarea| >> x               | este numarul valid?  |
  |                    |                    | --> da: inlocuieste  |
  |                    |                    | \-> nu: mesaj eroare |
  |                    |                    |    face T1.2 din nou |
  |--------------------|--------------------|----------------------|

  >>> T2.4 si T2.5 la fel ca T1.3 respectiv T1.4

  >>> T2.6 sterge intreaga lista


// T3: cautare numere

  >>> T3.1: tipărește partea imaginară pentru numerele din listă. Se dă intervalul de pozitii (sub secvențe)
      -> T3.1.1 afiseaza partea imaginara a numerelor din subsecventa
      -> T3.1.2 verificare

  | Frontend           | Imput              | Backend              |
  |--------------------|--------------------|----------------------|
  |care este pozitia   |                    |                      |
  |de inceput si cea de|                    | este pozitia valid?  |
  |final               |  >> p1, p2         | --> da: tipareste de |
  |                    |                    |  la p1 la p2 inclusiv|
  |                    |                    | \-> nu: mesaj eroare |
  |                    |                    |    face T3.1 din nou |
  |--------------------|--------------------|----------------------|

  << IMPORTANT >> TOTE VALIDARILE DE VALOARE POT FI FACUTE INTR-O SINGURA FUNCTIE 

  >>> T3.2: calcularea modulului
  >>> T3.3: tipărește toate numerele complexe care au modului mai mic decât 10
  >>> T3.4: tipărește toate numerele complexe care au modului egal 10

  | Frontend           | Imput              | Backend              |
  |--------------------|--------------------|----------------------|
  |care este pozitia   |                    |                      |
  |de inceput si cea de|                    | este pozitia valid?  |
  |final               |  >> p1, p2         | --> da: afiseaza de  |
  |                    |                    |  la p1 la p2 inclusiv|
  |                    |                    | \-> nu: mesaj eroare |
  |                    |                    |    face T3 din nou   |
  |--------------------|--------------------|----------------------|


// T4: operații cu numerele din listă
  >>> T4.1: suma numerelor dintr-o subsecvență dată
  >>> T4.2: produsul numerelor dintr-o subsecvență dată

  | Frontend           | Imput              | Backend                                     |
  |--------------------|--------------------|---------------------------------------------|
  |care este pozitia   |                    |                                             | 
  |de inceput si cea de|                    | este pozitia valid?                         |
  |final               |  >> p1, p2         | --> da: it call a function with one of the  |
  |                    |                    |   paramiters a lambda for ider T4.1 or T4.2 |
  |                    |                    | \-> nu: mesaj eroare                        |
  |                    |                    |    face T3 din nou                          |
  |--------------------|--------------------|---------------------------------------------|

  >>> T4.3: tipărește lista sortată descrescător după partea imaginară
      << IMPORTANT >> T4.3.1: copiaza lista in alt vector
      T4.3.2: sorteza lista
      T4.3.3: afiseaza lista

  | Frontend           | Imput              | Backend              |
  |--------------------|--------------------|----------------------|
  |care este pozitia   |                    |                      |
  |de inceput si cea de|                    | este pozitia valid?  |
  |final               |  >> p1, p2         | --> da: afiseaza de  |
  |                    |                    |  la p1 la p2 inclusiv|
  |                    |                    | \-> nu: mesaj eroare |
  |                    |                    |    face T4.3 din nou |
  |--------------------|--------------------|----------------------|

// T5: filtrare
  >>> T5.1: o functie cu un paramteru lambda dupa care face filtrarea
  >>> T5.2: functie de prim modulul este <, = sau > decât un număr dat // avem deva functe pt modul T3.2
      <, =, > is also a paramtier (in the function is a operator match)

  | Frontend           | Imput              | Backend                                     |
  |--------------------|--------------------|---------------------------------------------|
  |care este functia pe|                    |                                             | 
  |care vreiso         |                    | este pozitia valid?                         |
  |indeplinesti        |  >> p1, p2         | --> da: it call a function with one of the  |
  |                    |                    |   paramiters a lambda (T5.1)                |
  |                    |                    | \-> nu: mesaj eroare                        |
  |                    |                    |    face T3 din nou                          |
  |--------------------|--------------------|---------------------------------------------|

// T6: undo
  >>> T4.1.1: functie de copiere
  >>> T6.1: muntarea acestui vector copiat intr-o lista de vectori in care gasit toate iteratiile prin pare am trecut
